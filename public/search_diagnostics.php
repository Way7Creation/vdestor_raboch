<?php
/**
 * üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê
 * –§–∞–π–ª: search_diagnostics.php
 * –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å —Å–∞–π—Ç–∞ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

require_once __DIR__ . '/../vendor/autoload.php';

use App\Core\Database;
use OpenSearch\ClientBuilder;

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');
header('Pragma: no-cache');

// –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≤–æ–¥
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞</title>
    <style>
        body { font-family: monospace; background: #1a1a1a; color: #fff; padding: 20px; line-height: 1.6; }
        .section { background: #2a2a2a; padding: 20px; margin: 20px 0; border-radius: 8px; }
        .success { color: #4CAF50; font-weight: bold; }
        .error { color: #f44336; font-weight: bold; }
        .warning { color: #FFC107; font-weight: bold; }
        .info { color: #2196F3; }
        .code { background: #000; padding: 10px; border-radius: 4px; overflow-x: auto; }
        h2 { color: #FFC107; border-bottom: 2px solid #FFC107; padding-bottom: 10px; }
        pre { margin: 0; white-space: pre-wrap; }
        .test-result { margin: 10px 0; padding: 10px; background: #333; border-radius: 4px; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { padding: 8px; text-align: left; border: 1px solid #555; }
        th { background: #333; }
        .query-test { background: #1a1a1a; padding: 15px; margin: 10px 0; border: 1px solid #555; }
    </style>
</head>
<body>
<h1>üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê</h1>
<p>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: <?= date('Y-m-d H:i:s') ?></p>

<?php
// 1. –ü–†–û–í–ï–†–ö–ê OPENSEARCH
echo '<div class="section">';
echo '<h2>1. OpenSearch Status</h2>';

$opensearchAvailable = false;
$opensearchClient = null;

try {
    $opensearchClient = ClientBuilder::create()
        ->setHosts(['localhost:9200'])
        ->setRetries(1)
        ->setConnectionParams([
            'timeout' => 5,
            'connect_timeout' => 2
        ])
        ->build();
    
    // Ping
    $pingResult = $opensearchClient->ping();
    if ($pingResult) {
        echo '<p class="success">‚úÖ OpenSearch PING: OK</p>';
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        $info = $opensearchClient->info();
        echo '<div class="code"><pre>';
        echo "Version: " . ($info['version']['number'] ?? 'Unknown') . "\n";
        echo "Cluster Name: " . ($info['cluster_name'] ?? 'Unknown') . "\n";
        echo "Cluster UUID: " . ($info['cluster_uuid'] ?? 'Unknown') . "\n";
        echo '</pre></div>';
        
        // –ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
        $health = $opensearchClient->cluster()->health();
        $statusClass = $health['status'] === 'green' ? 'success' : ($health['status'] === 'yellow' ? 'warning' : 'error');
        echo "<p class='$statusClass'>Cluster Status: " . strtoupper($health['status']) . "</p>";
        echo '<div class="code"><pre>';
        echo "Active Shards: " . ($health['active_shards'] ?? 0) . "\n";
        echo "Active Primary Shards: " . ($health['active_primary_shards'] ?? 0) . "\n";
        echo "Number of Nodes: " . ($health['number_of_nodes'] ?? 0) . "\n";
        echo '</pre></div>';
        
        $opensearchAvailable = true;
    } else {
        echo '<p class="error">‚ùå OpenSearch PING: FAILED</p>';
    }
} catch (Exception $e) {
    echo '<p class="error">‚ùå OpenSearch Connection Error:</p>';
    echo '<div class="code"><pre>' . htmlspecialchars($e->getMessage()) . '</pre></div>';
}
echo '</div>';

// 2. –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í
if ($opensearchAvailable) {
    echo '<div class="section">';
    echo '<h2>2. –ò–Ω–¥–µ–∫—Å—ã OpenSearch</h2>';
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã products_*
        $indices = $opensearchClient->cat()->indices(['index' => 'products_*', 'v' => true]);
        
        if (empty($indices)) {
            echo '<p class="error">‚ùå –ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ products_*</p>';
        } else {
            echo '<table>';
            echo '<tr><th>Index</th><th>Docs Count</th><th>Size</th><th>Status</th></tr>';
            
            foreach ($indices as $index) {
                $status = $index['health'] === 'green' ? 'success' : ($index['health'] === 'yellow' ? 'warning' : 'error');
                echo '<tr>';
                echo '<td>' . htmlspecialchars($index['index']) . '</td>';
                echo '<td>' . htmlspecialchars($index['docs.count'] ?? '0') . '</td>';
                echo '<td>' . htmlspecialchars($index['store.size'] ?? '-') . '</td>';
                echo '<td class="' . $status . '">' . strtoupper($index['health']) . '</td>';
                echo '</tr>';
            }
            echo '</table>';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–∏–∞—Å products_current
        echo '<h3>–ê–ª–∏–∞—Å products_current:</h3>';
        try {
            $aliases = $opensearchClient->indices()->getAlias(['name' => 'products_current']);
            if (!empty($aliases)) {
                echo '<p class="success">‚úÖ –ê–ª–∏–∞—Å –Ω–∞–π–¥–µ–Ω:</p>';
                echo '<div class="code"><pre>' . json_encode(array_keys($aliases), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . '</pre></div>';
            } else {
                echo '<p class="error">‚ùå –ê–ª–∏–∞—Å products_current –ù–ï –Ω–∞–π–¥–µ–Ω!</p>';
            }
        } catch (Exception $e) {
            echo '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–∏–∞—Å–∞: ' . htmlspecialchars($e->getMessage()) . '</p>';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        echo '<h3>–ú–∞–ø–ø–∏–Ω–≥ –∏–Ω–¥–µ–∫—Å–∞:</h3>';
        try {
            $mapping = $opensearchClient->indices()->getMapping(['index' => 'products_current']);
            $indexName = array_key_first($mapping);
            if ($indexName && isset($mapping[$indexName]['mappings']['properties'])) {
                $properties = array_keys($mapping[$indexName]['mappings']['properties']);
                echo '<p class="success">‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ' . count($properties) . '</p>';
                echo '<div class="code"><pre>–ü–æ–ª—è: ' . implode(', ', array_slice($properties, 0, 10)) . '...</pre></div>';
            }
        } catch (Exception $e) {
            echo '<p class="error">‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥: ' . htmlspecialchars($e->getMessage()) . '</p>';
        }
        
    } catch (Exception $e) {
        echo '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏: ' . htmlspecialchars($e->getMessage()) . '</p>';
    }
    echo '</div>';
}

// 3. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
echo '<div class="section">';
echo '<h2>3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL</h2>';

try {
    $pdo = Database::getConnection();
    echo '<p class="success">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK</p>';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    $tables = [
        'products' => '–¢–æ–≤–∞—Ä—ã',
        'brands' => '–ë—Ä–µ–Ω–¥—ã', 
        'series' => '–°–µ—Ä–∏–∏',
        'product_images' => '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        'product_attributes' => '–ê—Ç—Ä–∏–±—É—Ç—ã',
        'stock_balances' => '–û—Å—Ç–∞—Ç–∫–∏'
    ];
    
    echo '<table>';
    echo '<tr><th>–¢–∞–±–ª–∏—Ü–∞</th><th>–ó–∞–ø–∏—Å–µ–π</th><th>–°—Ç–∞—Ç—É—Å</th></tr>';
    
    foreach ($tables as $table => $name) {
        try {
            $count = $pdo->query("SELECT COUNT(*) FROM $table")->fetchColumn();
            echo '<tr>';
            echo '<td>' . $name . ' (' . $table . ')</td>';
            echo '<td>' . number_format($count) . '</td>';
            echo '<td class="success">OK</td>';
            echo '</tr>';
        } catch (Exception $e) {
            echo '<tr>';
            echo '<td>' . $name . ' (' . $table . ')</td>';
            echo '<td>-</td>';
            echo '<td class="error">ERROR</td>';
            echo '</tr>';
        }
    }
    echo '</table>';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    echo '<h3>–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã:</h3>';
    $stmt = $pdo->query("SHOW INDEX FROM products WHERE Index_type = 'FULLTEXT'");
    $ftIndexes = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (empty($ftIndexes)) {
        echo '<p class="warning">‚ö†Ô∏è –ù–µ—Ç FULLTEXT –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ products</p>';
    } else {
        echo '<p class="success">‚úÖ –ù–∞–π–¥–µ–Ω–æ FULLTEXT –∏–Ω–¥–µ–∫—Å–æ–≤: ' . count($ftIndexes) . '</p>';
        foreach ($ftIndexes as $idx) {
            echo '<div class="code">Index: ' . $idx['Key_name'] . ' on column: ' . $idx['Column_name'] . '</div>';
        }
    }
    
} catch (Exception $e) {
    echo '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ë–î: ' . htmlspecialchars($e->getMessage()) . '</p>';
}
echo '</div>';

// 4. –ü–†–û–í–ï–†–ö–ê API ENDPOINTS
echo '<div class="section">';
echo '<h2>4. API Endpoints</h2>';

$apiTests = [
    '/api/test' => '–¢–µ—Å—Ç–æ–≤—ã–π endpoint',
    '/api/search?q=test&limit=1' => '–ü–æ–∏—Å–∫',
    '/api/availability?product_ids=1&city_id=1' => '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤'
];

foreach ($apiTests as $endpoint => $name) {
    echo '<div class="test-result">';
    echo '<strong>' . $name . ':</strong> ' . $endpoint . '<br>';
    
    try {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://' . $_SERVER['HTTP_HOST'] . $endpoint);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: application/json']);
        
        $startTime = microtime(true);
        $response = curl_exec($ch);
        $duration = round((microtime(true) - $startTime) * 1000, 2);
        
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode === 200) {
            echo '<p class="success">‚úÖ HTTP ' . $httpCode . ' (' . $duration . 'ms)</p>';
            
            $data = json_decode($response, true);
            if ($data) {
                echo '<div class="code"><pre>' . json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . '</pre></div>';
            }
        } else {
            echo '<p class="error">‚ùå HTTP ' . $httpCode . '</p>';
            echo '<div class="code"><pre>' . htmlspecialchars(substr($response, 0, 500)) . '</pre></div>';
        }
        
    } catch (Exception $e) {
        echo '<p class="error">‚ùå –û—à–∏–±–∫–∞: ' . htmlspecialchars($e->getMessage()) . '</p>';
    }
    echo '</div>';
}
echo '</div>';

// 5. –¢–ï–°–¢–û–í–´–ï –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´
if ($opensearchAvailable) {
    echo '<div class="section">';
    echo '<h2>5. –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ OpenSearch</h2>';
    
    $testQueries = [
        '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å' => '–û–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ',
        '–≤–∞47-29' => '–ê—Ä—Ç–∏–∫—É–ª —Å –¥–µ—Ñ–∏—Å–æ–º',
        '16–∞' => '–ß–∏—Å–ª–æ —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è',
        'schneider' => '–ë—Ä–µ–Ω–¥ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π',
        'iek' => '–ë—Ä–µ–Ω–¥ (–∫–æ—Ä–æ—Ç–∫–∏–π)',
        'dsrpfntkm' => '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å)'
    ];
    
    foreach ($testQueries as $query => $description) {
        echo '<div class="query-test">';
        echo '<strong>' . $description . ':</strong> "' . htmlspecialchars($query) . '"<br>';
        
        try {
            $searchBody = [
                'size' => 3,
                'query' => [
                    'multi_match' => [
                        'query' => $query,
                        'fields' => ['name^3', 'external_id^5', 'brand_name^2', 'description'],
                        'type' => 'best_fields',
                        'fuzziness' => 'AUTO'
                    ]
                ],
                '_source' => ['product_id', 'name', 'external_id', 'brand_name']
            ];
            
            $response = $opensearchClient->search([
                'index' => 'products_current',
                'body' => $searchBody
            ]);
            
            $total = $response['hits']['total']['value'] ?? 0;
            echo '<p class="info">–ù–∞–π–¥–µ–Ω–æ: ' . $total . ' —Ç–æ–≤–∞—Ä–æ–≤</p>';
            
            if ($total > 0) {
                echo '<div class="code"><pre>';
                foreach ($response['hits']['hits'] as $i => $hit) {
                    $product = $hit['_source'];
                    echo ($i + 1) . '. [' . $product['external_id'] . '] ' . $product['name'];
                    if (!empty($product['brand_name'])) {
                        echo ' (' . $product['brand_name'] . ')';
                    }
                    echo ' - Score: ' . round($hit['_score'], 2) . "\n";
                }
                echo '</pre></div>';
            }
            
        } catch (Exception $e) {
            echo '<p class="error">‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' . htmlspecialchars($e->getMessage()) . '</p>';
        }
        echo '</div>';
    }
    echo '</div>';
}

// 6. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í
echo '<div class="section">';
echo '<h2>6. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤</h2>';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try {
    $stmt = $pdo->query("
        SELECT * FROM application_logs 
        WHERE level IN ('error', 'critical') 
        AND message LIKE '%search%'
        ORDER BY created_at DESC 
        LIMIT 10
    ");
    $logs = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (empty($logs)) {
        echo '<p class="success">‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö</p>';
    } else {
        echo '<p class="warning">‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:</p>';
        foreach ($logs as $log) {
            echo '<div class="test-result">';
            echo '<strong>' . $log['created_at'] . '</strong> [' . strtoupper($log['level']) . ']<br>';
            echo htmlspecialchars($log['message']) . '<br>';
            if ($log['context']) {
                $context = json_decode($log['context'], true);
                echo '<div class="code"><pre>' . json_encode($context, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . '</pre></div>';
            }
            echo '</div>';
        }
    }
} catch (Exception $e) {
    echo '<p class="warning">‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: ' . htmlspecialchars($e->getMessage()) . '</p>';
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ PHP
$errorLog = ini_get('error_log');
if ($errorLog && file_exists($errorLog)) {
    echo '<h3>PHP Error Log (' . $errorLog . '):</h3>';
    $lines = array_slice(file($errorLog), -20);
    $searchErrors = array_filter($lines, function($line) {
        return stripos($line, 'search') !== false || stripos($line, 'opensearch') !== false;
    });
    
    if (empty($searchErrors)) {
        echo '<p class="info">–ù–µ—Ç –æ—à–∏–±–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–∏—Å–∫–æ–º</p>';
    } else {
        echo '<div class="code"><pre>' . htmlspecialchars(implode('', array_slice($searchErrors, -5))) . '</pre></div>';
    }
}
echo '</div>';

// 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
echo '<div class="section">';
echo '<h2>7. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>';

$recommendations = [];

if (!$opensearchAvailable) {
    $recommendations[] = [
        'level' => 'error',
        'text' => 'OpenSearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: sudo systemctl status opensearch'
    ];
}

if ($opensearchAvailable) {
    try {
        $aliases = $opensearchClient->indices()->getAlias(['name' => 'products_current']);
        if (empty($aliases)) {
            $recommendations[] = [
                'level' => 'error', 
                'text' => '–ê–ª–∏–∞—Å products_current –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: php index_opensearch_v4.php'
            ];
        }
    } catch (Exception $e) {
        $recommendations[] = [
            'level' => 'error',
            'text' => '–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–∏–∞—Å—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.'
        ];
    }
}

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
if (empty($recommendations)) {
    echo '<p class="success">‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>';
} else {
    foreach ($recommendations as $rec) {
        $class = $rec['level'] === 'error' ? 'error' : ($rec['level'] === 'warning' ? 'warning' : 'info');
        echo '<p class="' . $class . '">‚Ä¢ ' . $rec['text'] . '</p>';
    }
}
echo '</div>';
?>

<div class="section">
    <h2>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?</h2>
    <ol>
        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
        <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</li>
        <li>–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é</li>
    </ol>
</div>

</body>
</html>