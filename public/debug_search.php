<?php
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å API
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ /var/www/www-root/data/site/vdestor.ru/public/debug_search.php
 * –û—Ç–∫—Ä–æ–π—Ç–µ: https://vdestor.ru/debug_search.php
 */

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
error_reporting(E_ALL);
ini_set('display_errors', 1);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑—á–∏–∫
require_once __DIR__ . '/../vendor/autoload.php';

echo "<h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã</h1>";
echo "<style>
body { font-family: Arial; padding: 20px; background: #f5f5f5; }
.test { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
.success { color: green; }
.error { color: red; }
.warning { color: orange; }
.code { background: #f0f0f0; padding: 10px; border-radius: 4px; font-family: monospace; overflow-x: auto; }
pre { margin: 0; }
</style>";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "<div class='test'>";
echo "<h2>1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h2>";
try {
    $configPath = \App\Core\Config::getConfigPath();
    echo "<p class='success'>‚úÖ Config –ø—É—Ç—å: $configPath</p>";
    
    $dbConfig = \App\Core\Config::get('database.mysql');
    echo "<p class='success'>‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞</p>";
    echo "<div class='code'><pre>Host: {$dbConfig['host']}\nDatabase: {$dbConfig['database']}</pre></div>";
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " . $e->getMessage() . "</p>";
}
echo "</div>";

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "<div class='test'>";
echo "<h2>2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</h2>";
try {
    $pdo = \App\Core\Database::getConnection();
    echo "<p class='success'>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ</p>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    $tables = ['products', 'cities', 'warehouses', 'stock_balances', 'prices'];
    foreach ($tables as $table) {
        $stmt = $pdo->query("SELECT COUNT(*) FROM $table");
        $count = $stmt->fetchColumn();
        echo "<p>–¢–∞–±–ª–∏—Ü–∞ <strong>$table</strong>: $count –∑–∞–ø–∏—Å–µ–π</p>";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –ë–î: " . $e->getMessage() . "</p>";
}
echo "</div>";

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenSearch
echo "<div class='test'>";
echo "<h2>3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenSearch</h2>";
try {
    $client = \OpenSearch\ClientBuilder::create()
        ->setHosts(['localhost:9200'])
        ->build();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    $info = $client->info();
    echo "<p class='success'>‚úÖ OpenSearch –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤–µ—Ä—Å–∏—è: " . $info['version']['number'] . "</p>";
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
    $indexExists = $client->indices()->exists(['index' => 'products_current']);
    if ($indexExists) {
        echo "<p class='success'>‚úÖ –ò–Ω–¥–µ–∫—Å products_current —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>";
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        $count = $client->count(['index' => 'products_current']);
        echo "<p>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: " . number_format($count['count']) . "</p>";
        
        // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        $searchResult = $client->search([
            'index' => 'products_current',
            'body' => [
                'size' => 1,
                'query' => ['match_all' => new \stdClass()]
            ]
        ]);
        echo "<p class='success'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>";
    } else {
        echo "<p class='error'>‚ùå –ò–Ω–¥–µ–∫—Å products_current –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</p>";
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        $indices = $client->cat()->indices(['format' => 'json']);
        echo "<p>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã:</p>";
        echo "<div class='code'><pre>";
        foreach ($indices as $index) {
            if (strpos($index['index'], 'products') !== false) {
                echo $index['index'] . " - " . $index['docs.count'] . " –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n";
            }
        }
        echo "</pre></div>";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ OpenSearch: " . $e->getMessage() . "</p>";
    echo "<p class='warning'>‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ OpenSearch –∑–∞–ø—É—â–µ–Ω: <code>systemctl status opensearch</code></p>";
}
echo "</div>";

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ SearchService
echo "<div class='test'>";
echo "<h2>4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ SearchService</h2>";
try {
    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    $params = [
        'q' => '',
        'page' => 1,
        'limit' => 5,
        'city_id' => 1
    ];
    
    echo "<p>–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:</p>";
    echo "<div class='code'><pre>" . json_encode($params, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre></div>";
    
    $result = \App\Services\SearchService::search($params);
    
    if (isset($result['success']) && $result['success'] === false) {
        echo "<p class='error'>‚ùå –ü–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " . ($result['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "</p>";
    } else {
        echo "<p class='success'>‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ</p>";
        echo "<p>–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " . ($result['total'] ?? 0) . "</p>";
        if (!empty($result['products'])) {
            echo "<p>–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:</p>";
            echo "<div class='code'><pre>" . json_encode($result['products'][0], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre></div>";
        }
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ SearchService: " . $e->getMessage() . "</p>";
    echo "<p>Trace:</p>";
    echo "<div class='code'><pre>" . $e->getTraceAsString() . "</pre></div>";
}
echo "</div>";

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ DynamicProductDataService
echo "<div class='test'>";
echo "<h2>5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ DynamicProductDataService</h2>";
try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞
    $pdo = \App\Core\Database::getConnection();
    $stmt = $pdo->query("SELECT product_id FROM products LIMIT 1");
    $productId = $stmt->fetchColumn();
    
    if ($productId) {
        echo "<p>–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å product_id: $productId</p>";
        
        $dynamicService = new \App\Services\DynamicProductDataService();
        $dynamicData = $dynamicService->getProductsDynamicData([$productId], 1, null);
        
        echo "<p class='success'>‚úÖ DynamicProductDataService —Ä–∞–±–æ—Ç–∞–µ—Ç</p>";
        echo "<div class='code'><pre>" . json_encode($dynamicData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre></div>";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∞</p>";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ DynamicProductDataService: " . $e->getMessage() . "</p>";
}
echo "</div>";

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Å–∫–ª–∞–¥–æ–≤
echo "<div class='test'>";
echo "<h2>6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å–∫–ª–∞–¥–æ–≤</h2>";
try {
    $pdo = \App\Core\Database::getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞
    $stmt = $pdo->query("SELECT city_id, name FROM cities LIMIT 5");
    $cities = $stmt->fetchAll();
    echo "<p>–ì–æ—Ä–æ–¥–∞ –≤ –ë–î:</p>";
    echo "<div class='code'><pre>";
    foreach ($cities as $city) {
        echo "ID: {$city['city_id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {$city['name']}\n";
    }
    echo "</pre></div>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –≥–æ—Ä–æ–¥-—Å–∫–ª–∞–¥
    $stmt = $pdo->query("
        SELECT c.city_id, c.name as city_name, COUNT(cwm.warehouse_id) as warehouse_count
        FROM cities c
        LEFT JOIN city_warehouse_mapping cwm ON c.city_id = cwm.city_id
        GROUP BY c.city_id
        LIMIT 5
    ");
    $cityWarehouses = $stmt->fetchAll();
    echo "<p>–°–≤—è–∑—å –≥–æ—Ä–æ–¥–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞–º–∏:</p>";
    echo "<div class='code'><pre>";
    foreach ($cityWarehouses as $cw) {
        echo "–ì–æ—Ä–æ–¥: {$cw['city_name']} (ID: {$cw['city_id']}), –°–∫–ª–∞–¥–æ–≤: {$cw['warehouse_count']}\n";
    }
    echo "</pre></div>";
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–æ–≤: " . $e->getMessage() . "</p>";
}
echo "</div>";

// –¢–µ—Å—Ç 7: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API endpoint
echo "<div class='test'>";
echo "<h2>7Ô∏è‚É£ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API Controller</h2>";
try {
    $_GET = ['q' => '–≤–≤–≥ 3—Ö2.5', 'limit' => 5, 'city_id' => 1];
    $controller = new \App\Controllers\ApiController();
    
    ob_start();
    $controller->searchAction();
    $output = ob_get_clean();
    
    $json = json_decode($output, true);
    if ($json) {
        echo "<p class='success'>‚úÖ ApiController –æ—Ç—Ä–∞–±–æ—Ç–∞–ª</p>";
        echo "<div class='code'><pre>" . json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre></div>";
    } else {
        echo "<p class='error'>‚ùå ApiController –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</p>";
        echo "<div class='code'><pre>" . htmlspecialchars($output) . "</pre></div>";
    }
} catch (Exception $e) {
    echo "<p class='error'>‚ùå –û—à–∏–±–∫–∞ ApiController: " . $e->getMessage() . "</p>";
    echo "<div class='code'><pre>" . $e->getTraceAsString() . "</pre></div>";
}
echo "</div>";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
echo "<div class='test'>";
echo "<h2>8Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤</h2>";
$logFiles = [
    '/var/log/php8.1-fpm.log',
    '/var/log/nginx/error.log',
    '/var/www/www-root/data/logs/app.log'
];

foreach ($logFiles as $logFile) {
    if (file_exists($logFile) && is_readable($logFile)) {
        echo "<p><strong>$logFile:</strong></p>";
        $lines = array_slice(file($logFile), -10);
        echo "<div class='code'><pre>" . htmlspecialchars(implode('', $lines)) . "</pre></div>";
    } else {
        echo "<p class='warning'>‚ö†Ô∏è –§–∞–π–ª $logFile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>";
    }
}
echo "</div>";

echo "<hr>";
echo "<p class='warning'>‚ö†Ô∏è <strong>–£–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!</strong></p>";
?>