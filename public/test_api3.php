<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ: php test_api.php
 */

echo "üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API VDESTOR\n";
echo "=" . str_repeat("=", 50) . "\n\n";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$baseUrl = 'https://vdestor.ru'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS!
$tests = [
    '–¢–µ—Å—Ç API' => '/api/test',
    '–ü–æ–∏—Å–∫: –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å' => '/api/search?q=–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å&limit=5',
    '–ü–æ–∏—Å–∫: –≤–∞47-29' => '/api/search?q=–≤–∞47-29&limit=5',
    '–ü–æ–∏—Å–∫: 16–∞' => '/api/search?q=16–∞&limit=5',
    '–ü–æ–∏—Å–∫: schneider' => '/api/search?q=schneider&limit=5',
    '–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' => '/api/autocomplete?q=–∞–≤—Ç&limit=5',
    '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤' => '/api/availability?product_ids=1,2,3&city_id=1'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ JSON
function prettyJson($data) {
    return json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ endpoint
foreach ($tests as $name => $endpoint) {
    echo "üìå {$name}\n";
    echo "URL: {$baseUrl}{$endpoint}\n";
    
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $baseUrl . $endpoint,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HEADER => true,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_HTTPHEADER => [
            'Accept: application/json',
            'X-Requested-With: XMLHttpRequest'
        ]
    ]);
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    
    $header = substr($response, 0, $headerSize);
    $body = substr($response, $headerSize);
    
    if (curl_errno($ch)) {
        echo "‚ùå CURL Error: " . curl_error($ch) . "\n";
    } else {
        echo "HTTP Code: {$httpCode}\n";
        
        if ($httpCode == 200) {
            $json = json_decode($body, true);
            if (json_last_error() === JSON_ERROR_NONE) {
                echo "‚úÖ –£—Å–ø–µ—à–Ω–æ\n";
                
                if (isset($json['success'])) {
                    echo "Success: " . ($json['success'] ? 'true' : 'false') . "\n";
                }
                
                if (isset($json['data']['products'])) {
                    echo "–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " . count($json['data']['products']) . "\n";
                    echo "–í—Å–µ–≥–æ: " . ($json['data']['total'] ?? 0) . "\n";
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    foreach (array_slice($json['data']['products'], 0, 3) as $i => $product) {
                        echo sprintf(
                            "  %d. [%s] %s\n", 
                            $i + 1,
                            $product['external_id'] ?? 'NO_ID',
                            $product['name'] ?? 'NO_NAME'
                        );
                    }
                }
                
                if (isset($json['data']['suggestions'])) {
                    echo "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: " . count($json['data']['suggestions']) . "\n";
                    foreach ($json['data']['suggestions'] as $suggestion) {
                        echo "  - " . ($suggestion['text'] ?? $suggestion) . "\n";
                    }
                }
                
            } else {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON\n";
                echo "Body: " . substr($body, 0, 200) . "...\n";
            }
        } else {
            echo "‚ùå HTTP Error {$httpCode}\n";
            echo "Headers:\n{$header}\n";
            echo "Body: " . substr($body, 0, 500) . "\n";
        }
    }
    
    curl_close($ch);
    echo "\n" . str_repeat("-", 50) . "\n\n";
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OpenSearch –Ω–∞–ø—Ä—è–º—É—é
echo "üìä –ü–†–û–í–ï–†–ö–ê OPENSEARCH –ù–ê–ü–†–Ø–ú–£–Æ\n";
echo "=" . str_repeat("=", 50) . "\n\n";

$osUrl = 'https://localhost:9200/products_current/_search';
$osQuery = [
    'size' => 5,
    'query' => [
        'match' => [
            'name' => '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å'
        ]
    ]
];

$ch = curl_init();
curl_setopt_array($ch, [
    CURLOPT_URL => $osUrl,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_POST => true,
    CURLOPT_POSTFIELDS => json_encode($osQuery),
    CURLOPT_HTTPHEADER => ['Content-Type: application/json']
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

if ($httpCode == 200) {
    $data = json_decode($response, true);
    echo "‚úÖ OpenSearch —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
    echo "–ù–∞–π–¥–µ–Ω–æ: " . ($data['hits']['total']['value'] ?? 0) . " —Ç–æ–≤–∞—Ä–æ–≤\n";
} else {
    echo "‚ùå OpenSearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {$httpCode})\n";
}

curl_close($ch);

echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n";